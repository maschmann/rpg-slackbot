<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20210829172828 extends AbstractMigration
{
    public function getDescription(): string
    {
        return 'Create design_types';
    }

    public function up(Schema $schema): void
    {
        $this->addSql('
            CREATE TABLE design_types (
                name VARCHAR(255),
                traits VARCHAR(4),
                traits_long VARCHAR(255),
                description MEDIUMTEXT,
                strengths MEDIUMTEXT
              )
        ');

        $this->addSql('
            CREATE INDEX design_types_idx ON design_types(name)
        ');

        $this->addSql("INSERT INTO `design_types` (`name`, `traits`, `traits_long`, `description`, `strengths`) VALUES
            ('Construction Manager', 'SAPR', 'Simple, Abstract, Pragmatic, Robust', 'The Construction Manager loves to work like on a construction site. There is a plan and everybody works hand in hand to reach the aimed goal. He focuses on working solutions that are built on proven technologies. This ensures that the result will stand the test of time. The most matching motto is: Getting things done. He rather implements by himself than choosing the wrong and maybe unstable framework. He knows very well about his abilities and has reservations about foreign technologies that did not proof their maturity over a certain period of time. He also focuses more on the interaction of particular modules instead of having too many sophisticated and complex constructs in his design. He prefers simple craftsmanship which tells him not to finish before a certain level of robustness has been shown by manual or automated tests.\r\nYour designs are\r\nStable and reasonably planned without unnecessary complexity\r\nProgramming is\r\nLike managing a construction site. Something has to be built.', 'Fast in delivering stable and working solutions.\r\nCode and design are normally easy to understand.'),
            ('Technician', 'SAPT', 'Simple, Abstract, Pragmatic, Technologic', 'The best invention of all time is the tool box. For each task there is the right tool and the Technician is sure that it is in the tool box. The Technician loves to use the power of technologies and combines them to something that helps him achieve his goals in an efficient way. This can be seen as laziness but the Technician is also convinced that you shouldn\'t reinvent the wheel. Not all technologies fit together nicely so the Technician tries to take on a whole systems\' view when composing them. He does not aim for too much foresighted designs but keeps things simple, readable, and understandable. The Technician knows: If you want to be efficient, you should use the right tool, not as much tools as possible. Trade-offs are typically made for quick wins. Technology is meant to serve you, not to constrain you. In the end it\'s the result that counts not the number of lines you wrote.\r\nYour designs are\r\nNatural and simple using exactly the right tools for the job\r\nProgramming is\r\nA technical task which is based on selecting the right tools', 'Knows what is up to date with a good overview about pros and cons of several technologies.\r\nCode and design are normally easy to understand.\r\nVery fast in delivering solutions by using existing frameworks and combining them in a simple and pragmatic way.'),
            ('Space Probe Engineer', 'SAIR', 'Simple, Abstract, Idealistic, Robust', 'Space probes show how great software can be. They can fly for a decade performing complex maneuvers, precisely find their way to ridiculously tiny pieces of rock in outer space and may even land on them automatically. Space probes are marvelous pieces of technology and the Space Probe Engineer strives to build software which is equally robust and does precisely what it is supposed to do. He likes simple, no-frills solutions based on technology which stood the test of time and keeping the big picture in mind all the time. You can be sure: the code a Space Probe Engineer writes will be rock-solid.\r\nYour designs are\r\nWell-thought-out, standardized, robust, and conservative\r\nProgramming is\r\nA serious business', 'You produce stable, high-quality software.\r\nYou do not forget anything you have to do (maybe by using your own to do list).\r\n'),
            ('Author', 'SAIT', 'Simple, Abstract, Idealistic, Technologic', 'Writing software is like writing a book: It\'s planning and crafting and creating. All these three aspects need to be there and neither may be neglected. A novel without a carefully planned story line is boring and a piece of software without a carefully thought-about architecture is chaotic. A novelist who isn\'t skilled in the craft of writing will produce an amateurish result -- just like an unskilled software developer. And anything lacking the magic bits of artistic spirit will be mediocre at most. An author might use neologisms, experiment with new forms of story telling and constantly thinks of how to surprise the readers. For software development this means that The Author likes to use new technologies in order to write something that hasn\'t been imagined before. Furthermore an Author writes for an audience. This means that code needs to be readable, just like a novel needs to be. An Author cares about his work and thinks \"it\'s great\" and \"it\'s awful\" in alternation. Authors are passionate and enthusiastic and usually produce good work but sometimes they love their art a bit too much.\r\nYour designs are\r\nLike a good novel -- well thought out and still elegant\r\nProgramming is\r\nLike writing a book: a mixture of planning and creativity', 'Solutions are not only addressing the requirements but are elegant too.\r\nKeeps all aspects in mind, also the interaction of several components.\r\nUp to date with state of the art technologies and its facets.'),
            ('Fire Fighter', 'SCPR', 'Simple, Concrete, Pragmatic, Robust', 'When a house is burning -- and surely in software development this is a quite common case -- The Fire Fighter neither wastes time in endless discussions nor he is afraid of using his ax to get through some locked door in order to rescue someone. When there is a fire or a project which absolutely has to be finished by tomorrow no matter what, The Fire Fighter is the guy you are looking for. He uses simple and effective solutions to do what needs to be done. This also means that he might violate architectural constraints or simply anything that gets in the way. While others may still be dreaming of a big system which can do everything, he has already solved the problem and begins looking around where the next problem is that needs to be fixed. He relies on well known and proven technologies like the ax in his hand. And sometimes his life depends on his instruments which is the main reason why they have to be well proven. Being aware that any occurring event needs a quick solution he thinks in code and continuously translates requirements into simple and effective methods.\r\nYour designs are\r\nEffective and always focused on a current problem you want to solve.\r\nProgramming is\r\nProblem solving', 'Effective and efficient problem solver.\r\nCode is normally easy to understand, design is more or less split in problem cases.\r\nKnows his instruments and its abilities very well.'),
            ('Ninja', 'SCPT', 'Simple, Concrete, Pragmatic, Technologic', 'Ninjas are famous for their clout while remaining completely unseen. They sneak into the codebase, do their job in a quick and pragmatic way, and commit their changes before others even realize that a new requirement had popped up. Ninjas are extremely effective and efficient in what they do. On the other hand Ninjas take no prisoners and when something gets in the way, they aren\'t afraid of using violence. So sometimes they tend to sacrifice architecture for time to market. Being hired to fulfill a specific job it does not matter how much blood is spilled. In the end the result counts. But achieving their goal also means that they are very familiar with all the traditional but also the modern instruments and technologies of their guild.', 'Efficient and effective problem solvers\r\nAchieve their assigned goal with all available means\r\nCan also work well with legacy code'),
            ('Gardener', 'SCIR', 'Simple, Concrete, Idealistic, Robust', 'A piece of software is like a tree. It grows naturally and it needs to be trimmed regularly. Gardeners like refactoring because they know that there won\'t be an ingenious master plan which will solve all future problems. Software needs to grow and constantly adapt to the changing environment. Also trees don\'t follow a master plan when they grow. Depending on its age, condition and environment a tree needs to be watered, fertilized, trained, or trimmed and a gardener knows when to do what. In the same way a software Gardener knows when to change a piece of code such that it stays in a healthy shape. The health of its plants is a very important thing to him. This is why he always assures that everything works fine and is stable. The love to his plants can make him do more than necessary.\r\nYour designs are\r\nNaturally growing and constantly improving and adapting to new requirements\r\nProgramming is\r\nLike growing a tree', 'You can handle changing requirements and evolving software quite well.\r\nYou are caring about the things you do and pour your heart and soul into them.'),
            ('Craftsman', 'SCIT', 'Simple, Concrete, Idealistic, Technologic', 'The Craftsman sees software development as a craft and wants to master his discipline. He is reliable in his art. While he cares about his craft and never does a sloppy job, he also avoids cruft and prefers simple, no-frills solutions. Unnecessary or unrequested things will be omitted for keeping the result clean. Therefore he doesn\'t waste time on the drawing board and rather starts working right away to produce business value in a well crafted manner. Instead he relies on his professional skills and his practices he constantly trains and enhances to stay on a state of the art level of his craft. The Craftsman is aware that he is hired to produce business value. So he is willing to do trade-offs in order to fulfill the customer\'s requirements but only to the extend that doesn\'t harm his reputation as a professional craftsman.\r\nYour designs are\r\nCarefully crafted, simple, straightforward, and without bells and whistles\r\nProgramming is\r\nA craft', 'Delivers well crafted solutions with state of the art technologies.\r\nIs very keen to develop according to his understanding of the craft.\r\n'),
            ('Engineer', 'PAPR', 'Powerful, Abstract, Pragmatic, Robust', 'The Engineer investigates the right solution by creating a good plan. His toolbox contains powerful instruments gained by many years of studies and experience. His typical motto is: There\'s nothing to fear for an engineer! He uses time-tested technologies he also examined by himself. Each element of a system has its right place and its purpose and all have to play well with each other. Stability is an important topic for him because it will influence his reputation whether his solution will stand the test of time or not. Nevertheless the Engineer is also pragmatic in the sense that there is a limit on all actions like planning, building, stabilizing and so on, which is the customer\'s wish or the given circumstances like time and money.\r\nYour designs are\r\nWell planned and focused on customer needs with the opportunity to offer more than only the expected.\r\nProgramming is\r\nAn engineering discipline', 'There is almost nothing an engineer cannot do. Proficiency and reliability can be expected.\r\nHis solutions are well planned and he has a good structure or process to reach goals step by step.'),
            ('Magician', 'PAPT', 'Powerful, Abstract, Pragmatic, Technologic', 'For the Magician sufficiently advanced technology is indistinguishable from magic -- and software is a particularly nice one. Each library, each framework, and each technology is like a spell, a potion, or a wand. The more you know about them, the more of them you are able to use, the more powerful you are. By combining the right technologies you can solve almost any problem without much manual work. In that way you can build more complex and more powerful software than others are able to build. The Magician continuously looks for new technologies that may make him even more powerful. Generalized and extensible approaches offer this potential to him and are often picked for his solutions. He can handle complexity very well but is also interested to put only elements together that fit to each other or to the system design. Nevertheless he counts on effect, not beauty.\r\nYour designs are\r\nExtensible and foresighted\r\nProgramming is\r\nLike magic', 'Solutions are flexible to use and offer multiple extension points to add more functionality or to exchange currently used technologies.\r\nForesighted solutions can save time in the long run when the whole infrastructure is available.\r\nInterfaces/APIs typically remain stable.\r\n'),
            ('Architect', 'PAIR', 'Powerful, Abstract, Idealistic, Robust', 'A software system is like a house: it has several levels, there are several plans and several aspects that need to be considered. Lastly a system that shall be used, needs to be build on a stable foundation as it has to last for a long time. An architect picks technologies with care because he wants to assure that his system fulfills the non functional requirements and stands the test of time. He has an eye for the collaboration and interaction of particular elements and plans it conscientiously. He is able to offer several extensible solutions in varying designs as part of his acquired portfolio which sometimes seem to be a bit unworldly (for normal customers).\r\nYour designs are\r\nPlanned and well-thought-out\r\nProgramming is\r\nLike building a house', 'Architects communicate their ideas and think foresightedly.\r\nSolutions are well planned and elements aligned to each other'),
            ('Scientist', 'PAIT', 'Powerful, Abstract, Idealistic, Technologic', 'The Scientist can find a solution for even the hardest problems. It may take a while but a well-thought-out solution will be there, eventually. Not everybody understands The Scientist\'s code but one can be sure: it\'s a masterpiece. He is aware of all the new technologic achievements and examines them to get a better understanding and also to use them for his purposes. He is excited by the academical challenge of a task which can be more interesting than the particular customers\' needs and he won\'t surrender until it is solved.\r\nYour designs are\r\nWell thought-out and sophisticated but sometimes a bit over the top\r\nProgramming is\r\nInfinite', 'Given enough time The Scientist can solve almost any problem.\r\nHe has a very good (and often experienced) overview on state of the art technologies.'),
            ('Sorcerer', 'PCPR', 'Powerful, Concrete, Pragmatic, Robust', 'The sorcerer likes to cast powerful spells and he can rely on their effect. And an effect is only worthwhile when it is composed of several layers of swirly thaumaturgic energy. This means that he is very focused on the concrete details of the code and optimizes it regarding its outcome and stability. He prefers ancient wisdom or in other words: time-tested technologies instead of trendy but buggy ones. If you demand, the Sorcerer can be very pragmatic in his means. This can result in violating architectural constraints or in sacrificing some of the generality for some more explicit but effective solutions.\r\nYour designs are\r\nLike a good magic potion: edible, not overly exact but surely powerful\r\nProgramming is\r\nFeeling the code grow to something magnificent', 'Sorcerers can work well with large complex code bases and legacy code.\r\nThey are also good in optimizing existing one.'),
            ('Chef', 'PCPT', 'Powerful, Concrete, Pragmatic, Technologic', 'The chef loves to cook an awesome tasting meal with all the spices and ingredients that are available to him. Several combinations of spices can lead to varying tastes and make it even more interesting to try them out. And imagine all the different methodologies to cook, to blanch, to barbecue, etc. The Chef is very familiar with all these technologies that enable him to reach the perfect taste experience. But all of this aims to satisfy the guest as his customer which means that a meal has to be served before it is too cold or the guest has left the restaurant with a growling stomach. For doing so he might also use some shortcuts like flavor enhancer from time to time or in other words: prepared code snippets. Focusing on one dish sometimes means to lose overview about the whole menu but in fact it means to deliver a harmonious self-contained one.\r\nYour designs are\r\nA sweet arrangement of powerful elements and several technologies that can become very complex.\r\nProgramming is\r\nTasting fun! It is part of your life essence.', 'Solutions are up to date with current technologies. He even knows about upcoming things.\r\nGood isolated components can be extremely powerful, revolutionize concepts and replace existing components.\r\n'),
            ('Clockmaker', 'PCIR', 'Powerful, Concrete, Idealistic, Robust', 'A good system works precisely, just like a swiss clockwork. When every tiny cog wheel moves as it is suppose to, you can be sure that you\'ve created a masterpiece. A clockmaker knows the tiniest details of his code and certainly there are many of them. His designs are sophisticated but they work perfectly fine. For him there is no replacement for traditional cog wheels and screws. They stood the test of time and work well. And think about the incredible things you can do with just a bit mechanical stuff like presenting the right time and date as well as depth, barometric pressure and much more.\r\nYour designs are\r\nFull of carefully crafted details\r\nProgramming is\r\nLike creating a beautiful, precise clockwork', 'You are very good at writing code which exactly does what you want it to do'),
            ('Artist', 'PCIT', 'Powerful, Concrete, Idealistic, Technologic', 'The code is the code is the code. The Artist loves code, feels code, breaths code. Coding is an art and you need to be an Artist to really understand that. Code can be beautiful and the Artist strives to create beauty in everything he writes. Beautiful code is sophisticated, nicely arranged and powerful in its expression. Artistic code is thought-provoking. It makes you think and gives you new ideas every time you explore another aspect of it. Unfortunately not everybody is able to see its beauty. There are people who admire the Artist and others who\'ll stay philistines.\r\nYour designs are\r\nArtistic -- and artificial\r\nProgramming is\r\nAn art', 'Artists care about their code, they strive for quality and foresighted, powerful solutions\r\n');");
    }

    public function down(Schema $schema): void
    {
        $this->addSql('DROP TABLE design_types');
    }
}
